{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","objectKeys","setObjectKeys","userData","setUserData","currentData","setCurrentData","setCurrentPage","useEffect","dataObjectKeys","Object","keys","data","forEach","key","push","slice","parsePhone","jsonPhone","newPhone","split","join","makeNamePretty","name","result","replace","charAt","toUpperCase","filterBy","value","a","length","arraySearch","search","searchTerm","toLowerCase","filter","el","some","String","includes","renderPagination","noOfPaignations","Array","Math","ceil","fill","map","e","i","page","id","className","onClick","handlePaginationClick","target","pageNo","htmlFor","onChange","newUserData","sort","b","sortBy","type","placeholder","aria-label","aria-describedby","data-pagecount","scope","jsonDate","Date","toLocaleDateString","day","month","year","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99de0121.chunk.js","sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport data from './data/users.json'\nimport {useState, useEffect} from 'react';\n\nfunction App() {\n\n  const [objectKeys, setObjectKeys] = useState([]);\n  const [userData, setUserData] = useState([]);\n  const [currentData, setCurrentData] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  useEffect(() => {\n    let dataObjectKeys = [];\n    Object.keys(data[0]).forEach(key => dataObjectKeys.push(key));\n    setObjectKeys([...dataObjectKeys]);\n    setUserData([...data]);\n    setCurrentData(data.slice(0, 10));\n    \n  }, [])\n\n  const parseDate = (jsonDate) => {\n    const correctFormat = new Date(jsonDate).toLocaleDateString('en-GB', {day: '2-digit', month: '2-digit', year: 'numeric'})\n    return correctFormat;\n  };\n\n  const parsePhone = (jsonPhone) => {\n    let newPhone = [\"(+84)\"]\n    newPhone.push(...jsonPhone.split(\"-\"))\n    return newPhone.join(\"\")\n  }\n\n  const makeNamePretty = (name) => {\n    const result = name.replace( /([A-Z])/g, \" $1\" );\n    const finalResult = result.charAt(0).toUpperCase() + result.slice(1);\n    return finalResult;\n  }\n  \n  const sortBy = (value) => {\n    const newUserData = userData.sort(function(a, b) {\n      if (a[value] < b[value]){\n        return -1;\n      } else if (a[value] > b[value]) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n\n    setUserData([...newUserData]);\n    setCurrentData(newUserData.slice(0, 10));\n    setCurrentPage(1);\n  }\n\n  const filterBy = async (value) => {\n    if (value.length > 0) {\n      let search = await arraySearch(data, value);\n      setUserData([...search]);\n      setCurrentData(search.slice(0, 10));\n      setCurrentPage(1);\n    } else {\n      setUserData([...data]);\n      setCurrentData(data.slice(0, 10));\n      setCurrentPage(1);\n    }\n  }\n\n  const arraySearch = (data, value) => {\n    const searchTerm = value.toLowerCase();\n    return data.filter(el => {\n      return objectKeys.some(key => {\n        return String(el[key]).toLowerCase().includes(searchTerm);\n      })\n    })\n  }\n\n  const renderPagination = () => {\n    const noOfPaignations = new Array(Math.ceil(userData.length/ 10)).fill(0).map((e,i)=>i+1);\n    if (noOfPaignations.length >= 2){\n      return noOfPaignations.map((page) =>{\n        return <button id = {page} className =  \"btn btn-small btn-light\"\n        value = {page} onClick={(e) => handlePaginationClick(e.target.value)}>\n          {page}\n        </button>\n      } )\n    }\n    ;    \n  }\n\n  const handlePaginationClick = (pageNo) => {\n    const currentData = userData.slice((pageNo - 1) * 10, pageNo * 10);\n    setCurrentData(currentData);\n    setCurrentPage(pageNo);\n    renderPagination();\n  }\n\n  return (\n    <div className=\"App container\">\n      <h1> A simple web app </h1>\n      <div className=\"input-group mb-3\">\n        <div className=\"input-group-prepend\">\n          <label className=\"input-group-text\" htmlFor=\"orderBy\">Order by: </label>\n        </div>\n        <select className=\"custom-select\" id=\"orderBy\" onChange = {(e) => sortBy(e.target.value)}>\n        {\n            objectKeys.map(key => {\n              return <option value ={key}>{makeNamePretty(key)}</option>\n            })\n          }\n        </select>\n      </div>\n      <div className=\"input-group mb-3\">\n        <div className=\"input-group-prepend\">\n          <span className=\"input-group-text\" id=\"basic-addon1\">Filter by: </span>\n        </div>\n        <input type=\"text\" className=\"form-control\" onChange = {(e) => filterBy(e.target.value)}\n        placeholder=\"None\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"/>\n      </div>\n      <div className = \"paginationVals\">\n          {renderPagination()}\n      </div>\n      <table className=\"table\"  data-pagecount=\"10\">\n        <thead>\n          <tr>\n            {objectKeys.map(key => {\n              return <th scope = \"col\">{makeNamePretty(key)}</th>\n            } )}\n          </tr>\n        </thead>\n        <tbody>\n          {currentData.map(el => \n          <tr>\n            {objectKeys.map (key => {\n              if (key === 'phone'){\n                return <td>{parsePhone(el[key])}</td>;\n              } else if (key === 'birthday'){\n                return <td>{parseDate(el[key])}</td>;\n              } else {\n                return <td>{el[key]}</td>;\n              }\n            })}\n            \n          </tr>)}\n        </tbody>\n      </table>\n\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}